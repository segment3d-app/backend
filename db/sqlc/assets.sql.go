// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: assets.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkIsLiked = `-- name: CheckIsLiked :one
SELECT EXISTS (
        SELECT 1
        FROM "likes"
        WHERE uid = $1
            AND "assetsId" = $2
    ) AS "exists"
`

type CheckIsLikedParams struct {
	Uid      uuid.UUID `json:"uid"`
	AssetsId uuid.UUID `json:"assetsId"`
}

func (q *Queries) CheckIsLiked(ctx context.Context, arg CheckIsLikedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIsLiked, arg.Uid, arg.AssetsId)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAsset = `-- name: CreateAsset :one
INSERT INTO "assets" (
        uid,
        title,
        slug,
        status,
        "assetUrl",
        "assetType",
        "thumbnailUrl",
        "isPrivate",
        likes
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

type CreateAssetParams struct {
	Uid          uuid.UUID `json:"uid"`
	Title        string    `json:"title"`
	Slug         string    `json:"slug"`
	Status       string    `json:"status"`
	AssetUrl     string    `json:"assetUrl"`
	AssetType    string    `json:"assetType"`
	ThumbnailUrl string    `json:"thumbnailUrl"`
	IsPrivate    bool      `json:"isPrivate"`
	Likes        int32     `json:"likes"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Assets, error) {
	row := q.db.QueryRowContext(ctx, createAsset,
		arg.Uid,
		arg.Title,
		arg.Slug,
		arg.Status,
		arg.AssetUrl,
		arg.AssetType,
		arg.ThumbnailUrl,
		arg.IsPrivate,
		arg.Likes,
	)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLike = `-- name: CreateLike :exec
INSERT INTO "likes" (uid, "assetsId")
VALUES ($1, $2)
`

type CreateLikeParams struct {
	Uid      uuid.UUID `json:"uid"`
	AssetsId uuid.UUID `json:"assetsId"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.db.ExecContext(ctx, createLike, arg.Uid, arg.AssetsId)
	return err
}

const decreaseAssetLikes = `-- name: DecreaseAssetLikes :one
UPDATE "assets"
SET likes = likes - 1
WHERE "id" = $1
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

func (q *Queries) DecreaseAssetLikes(ctx context.Context, id uuid.UUID) (Assets, error) {
	row := q.db.QueryRowContext(ctx, decreaseAssetLikes, id)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAssets = `-- name: GetAllAssets :many
SELECT a.id, a.uid, a.title, a.slug, a."assetUrl", a."assetType", a."thumbnailUrl", a."gaussianUrl", a."pointCloudUrl", a."isPrivate", a.status, a.likes, a."createdAt", a."updatedAt",
    u.name,
    u.avatar,
    u.email
FROM "assets" AS a
    LEFT JOIN "users" AS u ON u.uid = a.uid
ORDER BY a."createdAt" DESC
`

type GetAllAssetsRow struct {
	ID            uuid.UUID      `json:"id"`
	Uid           uuid.UUID      `json:"uid"`
	Title         string         `json:"title"`
	Slug          string         `json:"slug"`
	AssetUrl      string         `json:"assetUrl"`
	AssetType     string         `json:"assetType"`
	ThumbnailUrl  string         `json:"thumbnailUrl"`
	GaussianUrl   sql.NullString `json:"gaussianUrl"`
	PointCloudUrl sql.NullString `json:"pointCloudUrl"`
	IsPrivate     bool           `json:"isPrivate"`
	Status        string         `json:"status"`
	Likes         int32          `json:"likes"`
	CreatedAt     time.Time      `json:"createdAt"`
	UpdatedAt     time.Time      `json:"updatedAt"`
	Name          sql.NullString `json:"name"`
	Avatar        sql.NullString `json:"avatar"`
	Email         sql.NullString `json:"email"`
}

func (q *Queries) GetAllAssets(ctx context.Context) ([]GetAllAssetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAssetsRow{}
	for rows.Next() {
		var i GetAllAssetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Title,
			&i.Slug,
			&i.AssetUrl,
			&i.AssetType,
			&i.ThumbnailUrl,
			&i.GaussianUrl,
			&i.PointCloudUrl,
			&i.IsPrivate,
			&i.Status,
			&i.Likes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Avatar,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAssetsWithLikesInformation = `-- name: GetAllAssetsWithLikesInformation :many
SELECT a.id, a.uid, a.title, a.slug, a."assetUrl", a."assetType", a."thumbnailUrl", a."gaussianUrl", a."pointCloudUrl", a."isPrivate", a.status, a.likes, a."createdAt", a."updatedAt",
    u.name,
    u.avatar,
    u.email,
    CASE
        WHEN l.uid = $1 THEN TRUE
        ELSE FALSE
    END AS "isLikedByMe"
FROM "assets" AS a
    LEFT JOIN "users" AS u ON u.uid = a.uid
    LEFT JOIN "likes" AS l ON l."assetsId" = a.id
    AND l.uid = $1
ORDER BY a."createdAt" DESC
`

type GetAllAssetsWithLikesInformationRow struct {
	ID            uuid.UUID      `json:"id"`
	Uid           uuid.UUID      `json:"uid"`
	Title         string         `json:"title"`
	Slug          string         `json:"slug"`
	AssetUrl      string         `json:"assetUrl"`
	AssetType     string         `json:"assetType"`
	ThumbnailUrl  string         `json:"thumbnailUrl"`
	GaussianUrl   sql.NullString `json:"gaussianUrl"`
	PointCloudUrl sql.NullString `json:"pointCloudUrl"`
	IsPrivate     bool           `json:"isPrivate"`
	Status        string         `json:"status"`
	Likes         int32          `json:"likes"`
	CreatedAt     time.Time      `json:"createdAt"`
	UpdatedAt     time.Time      `json:"updatedAt"`
	Name          sql.NullString `json:"name"`
	Avatar        sql.NullString `json:"avatar"`
	Email         sql.NullString `json:"email"`
	IsLikedByMe   bool           `json:"isLikedByMe"`
}

func (q *Queries) GetAllAssetsWithLikesInformation(ctx context.Context, uid uuid.UUID) ([]GetAllAssetsWithLikesInformationRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssetsWithLikesInformation, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAssetsWithLikesInformationRow{}
	for rows.Next() {
		var i GetAllAssetsWithLikesInformationRow
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Title,
			&i.Slug,
			&i.AssetUrl,
			&i.AssetType,
			&i.ThumbnailUrl,
			&i.GaussianUrl,
			&i.PointCloudUrl,
			&i.IsPrivate,
			&i.Status,
			&i.Likes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Avatar,
			&i.Email,
			&i.IsLikedByMe,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssetsById = `-- name: GetAssetsById :one
SELECT id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
FROM "assets"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAssetsById(ctx context.Context, id uuid.UUID) (Assets, error) {
	row := q.db.QueryRowContext(ctx, getAssetsById, id)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssetsBySlug = `-- name: GetAssetsBySlug :one
SELECT id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
FROM "assets"
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetAssetsBySlug(ctx context.Context, slug string) (Assets, error) {
	row := q.db.QueryRowContext(ctx, getAssetsBySlug, slug)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssetsByUid = `-- name: GetAssetsByUid :many
SELECT id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
FROM "assets"
WHERE uid = $1
ORDER BY "createdAt" DESC
`

func (q *Queries) GetAssetsByUid(ctx context.Context, uid uuid.UUID) ([]Assets, error) {
	rows, err := q.db.QueryContext(ctx, getAssetsByUid, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Assets{}
	for rows.Next() {
		var i Assets
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Title,
			&i.Slug,
			&i.AssetUrl,
			&i.AssetType,
			&i.ThumbnailUrl,
			&i.GaussianUrl,
			&i.PointCloudUrl,
			&i.IsPrivate,
			&i.Status,
			&i.Likes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyAssets = `-- name: GetMyAssets :many
SELECT a.id, a.uid, a.title, a.slug, a."assetUrl", a."assetType", a."thumbnailUrl", a."gaussianUrl", a."pointCloudUrl", a."isPrivate", a.status, a.likes, a."createdAt", a."updatedAt",
    CASE
        WHEN l.uid = $1 THEN TRUE
        ELSE FALSE
    END AS "isLikedByMe"
FROM "assets" AS a
    LEFT JOIN "likes" AS l ON l."assetsId" = a.id
    AND l.uid = $1
WHERE a.uid = $1
ORDER BY "createdAt" DESC
`

type GetMyAssetsRow struct {
	ID            uuid.UUID      `json:"id"`
	Uid           uuid.UUID      `json:"uid"`
	Title         string         `json:"title"`
	Slug          string         `json:"slug"`
	AssetUrl      string         `json:"assetUrl"`
	AssetType     string         `json:"assetType"`
	ThumbnailUrl  string         `json:"thumbnailUrl"`
	GaussianUrl   sql.NullString `json:"gaussianUrl"`
	PointCloudUrl sql.NullString `json:"pointCloudUrl"`
	IsPrivate     bool           `json:"isPrivate"`
	Status        string         `json:"status"`
	Likes         int32          `json:"likes"`
	CreatedAt     time.Time      `json:"createdAt"`
	UpdatedAt     time.Time      `json:"updatedAt"`
	IsLikedByMe   sql.NullBool   `json:"isLikedByMe"`
}

func (q *Queries) GetMyAssets(ctx context.Context, uid uuid.UUID) ([]GetMyAssetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMyAssets, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMyAssetsRow{}
	for rows.Next() {
		var i GetMyAssetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Title,
			&i.Slug,
			&i.AssetUrl,
			&i.AssetType,
			&i.ThumbnailUrl,
			&i.GaussianUrl,
			&i.PointCloudUrl,
			&i.IsPrivate,
			&i.Status,
			&i.Likes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsLikedByMe,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSlug = `-- name: GetSlug :many
SELECT slug
FROM "assets"
WHERE slug LIKE $1
ORDER BY "createdAt" ASC
`

func (q *Queries) GetSlug(ctx context.Context, slug string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getSlug, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var slug string
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseAssetLikes = `-- name: IncreaseAssetLikes :one
UPDATE "assets"
SET likes = likes + 1
WHERE "id" = $1
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

func (q *Queries) IncreaseAssetLikes(ctx context.Context, id uuid.UUID) (Assets, error) {
	row := q.db.QueryRowContext(ctx, increaseAssetLikes, id)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeAsset = `-- name: RemoveAsset :one
DELETE FROM "assets"
WHERE uid = $1
    AND id = $2
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

type RemoveAssetParams struct {
	Uid uuid.UUID `json:"uid"`
	ID  uuid.UUID `json:"id"`
}

func (q *Queries) RemoveAsset(ctx context.Context, arg RemoveAssetParams) (Assets, error) {
	row := q.db.QueryRowContext(ctx, removeAsset, arg.Uid, arg.ID)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeLike = `-- name: RemoveLike :one
DELETE FROM "likes"
WHERE uid = $1
    AND "assetsId" = $2
RETURNING uid, "assetsId", "createdAt", "updatedAt"
`

type RemoveLikeParams struct {
	Uid      uuid.UUID `json:"uid"`
	AssetsId uuid.UUID `json:"assetsId"`
}

func (q *Queries) RemoveLike(ctx context.Context, arg RemoveLikeParams) (Likes, error) {
	row := q.db.QueryRowContext(ctx, removeLike, arg.Uid, arg.AssetsId)
	var i Likes
	err := row.Scan(
		&i.Uid,
		&i.AssetsId,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAssetStatus = `-- name: UpdateAssetStatus :one
UPDATE "assets"
SET "status" = $3
WHERE uid = $1
    and id = $2
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

type UpdateAssetStatusParams struct {
	Uid    uuid.UUID `json:"uid"`
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateAssetStatus(ctx context.Context, arg UpdateAssetStatusParams) (Assets, error) {
	row := q.db.QueryRowContext(ctx, updateAssetStatus, arg.Uid, arg.ID, arg.Status)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAssetUrl = `-- name: UpdateAssetUrl :one
UPDATE "assets"
SET "assetUrl" = $3
WHERE uid = $1
    and id = $2
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

type UpdateAssetUrlParams struct {
	Uid      uuid.UUID `json:"uid"`
	ID       uuid.UUID `json:"id"`
	AssetUrl string    `json:"assetUrl"`
}

func (q *Queries) UpdateAssetUrl(ctx context.Context, arg UpdateAssetUrlParams) (Assets, error) {
	row := q.db.QueryRowContext(ctx, updateAssetUrl, arg.Uid, arg.ID, arg.AssetUrl)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGaussianUrl = `-- name: UpdateGaussianUrl :one
UPDATE "assets"
SET "gaussianUrl" = $3,
    "status" = CASE
        WHEN "status" = 'generating splat' THEN 'completed'
        ELSE "status"
    END
WHERE uid = $1
    and id = $2
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

type UpdateGaussianUrlParams struct {
	Uid         uuid.UUID      `json:"uid"`
	ID          uuid.UUID      `json:"id"`
	GaussianUrl sql.NullString `json:"gaussianUrl"`
}

func (q *Queries) UpdateGaussianUrl(ctx context.Context, arg UpdateGaussianUrlParams) (Assets, error) {
	row := q.db.QueryRowContext(ctx, updateGaussianUrl, arg.Uid, arg.ID, arg.GaussianUrl)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePointCloudUrl = `-- name: UpdatePointCloudUrl :one
UPDATE "assets"
SET "pointCloudUrl" = $3
WHERE uid = $1
    and id = $2
RETURNING id, uid, title, slug, "assetUrl", "assetType", "thumbnailUrl", "gaussianUrl", "pointCloudUrl", "isPrivate", status, likes, "createdAt", "updatedAt"
`

type UpdatePointCloudUrlParams struct {
	Uid           uuid.UUID      `json:"uid"`
	ID            uuid.UUID      `json:"id"`
	PointCloudUrl sql.NullString `json:"pointCloudUrl"`
}

func (q *Queries) UpdatePointCloudUrl(ctx context.Context, arg UpdatePointCloudUrlParams) (Assets, error) {
	row := q.db.QueryRowContext(ctx, updatePointCloudUrl, arg.Uid, arg.ID, arg.PointCloudUrl)
	var i Assets
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Title,
		&i.Slug,
		&i.AssetUrl,
		&i.AssetType,
		&i.ThumbnailUrl,
		&i.GaussianUrl,
		&i.PointCloudUrl,
		&i.IsPrivate,
		&i.Status,
		&i.Likes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
