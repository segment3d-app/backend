// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tags.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createTag = `-- name: CreateTag :one
INSERT INTO "tags" (name, slug)
VALUES ($1, $2)
RETURNING id, name, slug, "createdAt", "updatedAt"
`

type CreateTagParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tags, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Name, arg.Slug)
	var i Tags
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagsByKeyword = `-- name: GetTagsByKeyword :many
SELECT id, name, slug, "createdAt", "updatedAt" 
FROM tags
WHERE name LIKE '%' || $1 || '%'
LIMIT $2
`

type GetTagsByKeywordParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int64          `json:"limit"`
}

func (q *Queries) GetTagsByKeyword(ctx context.Context, arg GetTagsByKeywordParams) ([]Tags, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByKeyword, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tags{}
	for rows.Next() {
		var i Tags
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByTagsName = `-- name: GetTagsByTagsName :many
SELECT id, name, slug, "createdAt", "updatedAt"
FROM tags
WHERE name = ANY($1)
`

func (q *Queries) GetTagsByTagsName(ctx context.Context, name []string) ([]Tags, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByTagsName, pq.Array(name))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tags{}
	for rows.Next() {
		var i Tags
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
